#!/bin/bash

# üöÄ SCRIPT DE AN√ÅLISE DE PERFORMANCE DEVELOPMENT
# Script para an√°lise r√°pida de performance em ambiente de desenvolvimento

echo "üîç ANALISANDO PERFORMANCE DA LANDING PAGE SOLUCTIONS..."
echo "=================================================="

# Verificar se o arquivo index.html existe
if [ ! -f "index.html" ]; then
    echo "‚ùå Arquivo index.html n√£o encontrado!"
    exit 1
fi

echo ""
echo "üìä AN√ÅLISE DE RECURSOS E OTIMIZA√á√ïES:"
echo "------------------------------------"

# Analisar duplica√ß√µes de recursos
echo "üîç Verificando duplica√ß√µes de recursos..."

# Fontes duplicadas
font_count=$(grep -c "googleapis.com" index.html)
echo "   üìù Google Fonts carregadas: $font_count vezes"

# Scripts externos
script_count=$(grep -c "cdnjs.cloudflare.com" index.html)
echo "   üìú Scripts CDNJS: $script_count"

# CSS externos
css_count=$(grep -c "rel=\"stylesheet\"" index.html)
echo "   üé® CSS externos: $css_count"

echo ""
echo "üéØ OTIMIZA√á√ïES IMPLEMENTADAS:"
echo "----------------------------"

# Verificar preconnections
preconnect_count=$(grep -c "rel=\"preconnect\"" index.html)
echo "   üîó Preconnections: $preconnect_count"

# Verificar carregamento diferido
deferred_css=$(grep -c "media=\"print\"" index.html)
echo "   ‚è≥ CSS diferido: $deferred_css"

# Verificar JavaScript cr√≠tico
critical_js=$(grep -c "js/critical.js" index.html)
echo "   ‚ö° JavaScript cr√≠tico: $critical_js"

echo ""
echo "üìÅ AN√ÅLISE DE ARQUIVOS:"
echo "----------------------"

# Tamanhos de arquivos
echo "   üìÑ Tamanhos dos arquivos principais:"
if [ -f "index.html" ]; then
    size=$(du -h index.html | cut -f1)
    echo "      - index.html: $size"
fi

if [ -f "index-optimized.html" ]; then
    size=$(du -h index-optimized.html | cut -f1)
    echo "      - index-optimized.html: $size"
fi

if [ -f "css/main.css" ]; then
    size=$(du -h css/main.css | cut -f1)
    echo "      - main.css: $size"
fi

if [ -f "css/main-critical.css" ]; then
    size=$(du -h css/main-critical.css | cut -f1)
    echo "      - main-critical.css: $size"
fi

if [ -f "css/main-optimized.css" ]; then
    size=$(du -h css/main-optimized.css | cut -f1)
    echo "      - main-optimized.css: $size"
fi

if [ -f "js/main.js" ]; then
    size=$(du -h js/main.js | cut -f1)
    echo "      - main.js: $size"
fi

if [ -f "js/critical.js" ]; then
    size=$(du -h js/critical.js | cut -f1)
    echo "      - critical.js: $size"
fi

echo ""
echo "üîß VERIFICA√á√ïES DE PERFORMANCE:"
echo "------------------------------"

# Verificar CSS cr√≠tico inline
inline_css=$(grep -c "<style>" index.html)
echo "   üé® CSS inline cr√≠tico: $inline_css blocos"

# Verificar async/defer nos scripts
async_scripts=$(grep -c "async" index.html)
defer_scripts=$(grep -c "defer" index.html)
echo "   üìú Scripts async: $async_scripts"
echo "   üìú Scripts defer: $defer_scripts"

# Verificar lazy loading
lazy_images=$(grep -c "loading=\"lazy\"" index.html 2>/dev/null || echo "0")
echo "   üñºÔ∏è  Imagens com lazy loading: $lazy_images"

# Verificar meta tags de performance
viewport_meta=$(grep -c "viewport" index.html)
echo "   üì± Meta viewport: $viewport_meta"

echo ""
echo "üìã RECOMENDA√á√ïES DE DESENVOLVIMENTO:"
echo "-----------------------------------"

# Verifica√ß√µes espec√≠ficas para desenvolvimento
echo "   ‚úÖ IMPLEMENTADO:"

if grep -q "preconnect" index.html; then
    echo "      - Preconnections para dom√≠nios externos"
fi

if grep -q "css/main-critical.css" index.html; then
    echo "      - CSS cr√≠tico separado"
fi

if grep -q "js/critical.js" index.html; then
    echo "      - JavaScript cr√≠tico otimizado"
fi

if grep -q "media=\"print\"" index.html; then
    echo "      - Carregamento diferido de CSS n√£o-cr√≠tico"
fi

echo ""
echo "   üéØ PR√ìXIMOS PASSOS PARA DESENVOLVIMENTO:"
echo "      1. Testar em dispositivos m√≥veis reais"
echo "      2. Verificar Network tab no DevTools"
echo "      3. Executar Lighthouse audit"
echo "      4. Monitorar Core Web Vitals"

echo ""
echo "üöÄ COMANDOS √öTEIS PARA DESENVOLVIMENTO:"
echo "--------------------------------------"
echo "   # Iniciar servidor local:"
echo "   python3 -m http.server 8000"
echo ""
echo "   # An√°lise Lighthouse (Chrome):"
echo "   npx lighthouse http://localhost:8000 --output html --output-path lighthouse-report.html"
echo ""
echo "   # Verificar tamanho comprimido:"
echo "   gzip -c index.html | wc -c"

echo ""
echo "‚ú® AN√ÅLISE CONCLU√çDA!"
echo "==================="
